@using BreederBlazor.Services.Auth
@using System.Net.Http
@using BreederBlazor.Services.Util
@using BreederBlazor.Models.Base
@using BreederBlazor.Services.BreedingRecords
@using BreederBlazor.Services.Contacts
@using BreederBlazor.Services.Litters
@using BreederBlazor.Models.Dtos.BreedingRecordDto

@inject IAuthService AuthService
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IBreedingRecordService BreedingRecordService
@inject IContactService ContactService
@inject ILitterService LitterService

@if (Loaded)
{
    <div class="container" style="margin: 20px 7px 20px 4px;">
        
        <div class="row">
            <div class="col BreedingRecordFormCol">
                <h3>Name</h3>
                <RadzenTextBox @bind-Value=@createBreedingRecordDto.Name Change=@(args => OnChange(args, "TextBox")) />
            </div>
        </div>

        <div class="row">
            <div class="col">
                <h3>Gender</h3>
                <RadzenSelectBar @bind-Value=@createBreedingRecordDto.Sex TValue="int" Change=@(args => OnChange(args, "SelectBar with single selection"))>
                    <Items>
                        <RadzenSelectBarItem Text="M" Value="1" />
                        <RadzenSelectBarItem Text="F" Value="2" />
                    </Items>
                </RadzenSelectBar>
            </div>
        </div>


        <div class="row">
            <div class="col">
                <h3>Birth Litter</h3>
                <RadzenDropDown AllowClear="true" TValue="int"
                                Data=@(litters.Distinct())
                                TextProperty="Name" ValueProperty="Id" @bind-Value=@createBreedingRecordDto.BirthLitterId Change=@(args => OnChange(args, "DropDown")) />
            </div>
        </div>
        <div class="row">
            <div class="col">
                <h3>Born</h3>
                <RadzenDatePicker @bind-Value=@createBreedingRecordDto.Birthday DateFormat="d" Change=@(args => OnChange(args, "DatePicker")) />
            </div>
            <div class="col">
                <h3>Acquired</h3>
                <RadzenDatePicker @bind-Value=@createBreedingRecordDto.DateOfAcquisition DateFormat="d" Change=@(args => OnChange(args, "DatePicker")) />
            </div>
        </div>

        <div class="row">
            <div class="col">
                <h3>Owner</h3>
                <RadzenDropDown AllowClear="true" TValue="int"
                                Data=@(contacts.Distinct())
                                TextProperty="Name" ValueProperty="Id" @bind-Value=@createBreedingRecordDto.OwnerId Change=@(args => OnChange(args, "DropDown")) />
            </div>
            <div class="col">
                <h3>Breeder</h3>
                <RadzenDropDown AllowClear="true" TValue="int"
                                Data=@(contacts.Distinct())
                                TextProperty="Name" ValueProperty="Id" @bind-Value=@createBreedingRecordDto.BreederId Change=@(args => OnChange(args, "DropDown")) />
            </div>
        </div>
        <div class="row">
            <div class="col">
                <h3>Make this record public? <RadzenCheckBox @bind-Value=@createBreedingRecordDto.Public TValue="bool" Change=@(args => OnChange(args, "CheckBox1 CheckBox")) /></h3>

            </div>
        </div>
        <div class="row">
            <div class="col">
                <RadzenButton Click=@(args => OnClickSubmit("Button with text")) Text="Submit" Style="margin-bottom: 20px; background-color: forestgreen;" />
            </div>
            <div class="col">
                <RadzenButton Click=@(args => OnClickCancel("Button with text")) Text="Cancel" Style="margin-bottom: 20px; background-color: red;" />
            </div>
        </div>
    </div>

    <div class="col-xl-6">
        <EventConsole @ref=@console />
    </div>

}
else
{
    <h3>Loading...</h3>
}

@code
{
    [Parameter]
    public EventCallback ReturnToPreviousUrl { get; set; }

    DateTime? Birthday = DateTime.Now;
    IEnumerable<Contact> contacts;
    IEnumerable<Litter> litters;

    CreateBreedingRecordDto createBreedingRecordDto;

    private bool Loaded = false;

    EventConsole console;

    protected override async Task OnInitializedAsync()
    {

        createBreedingRecordDto = new CreateBreedingRecordDto();

        // Load contacts
        contacts = await ContactService.GetAllContacts(AuthService.user.Key);

        // Load litters
        litters = await LitterService.GetAllLitters(AuthService.user.Key);

        Loaded = true;
    }


    async Task OnClickSubmit(string buttonName)
    {
        await BreedingRecordService.CreateBreedingRecord(createBreedingRecordDto, AuthService.user.Key);
        //NavigationManager.NavigateTo("/breedingRecordList");
        await ReturnToPreviousUrl.InvokeAsync();
    }

    async Task OnClickCancel(string buttonName)
    {
        console.Log($"{buttonName} clicked");
        //NavigationManager.NavigateTo("/breedingRecordList");
        await ReturnToPreviousUrl.InvokeAsync();
    }


    void OnChange(object value, string name)
    {
        console.Log($"{name} value changed to {value}");
    }


}
