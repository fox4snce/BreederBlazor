@page "/createLitter"

@using BreederBlazor.Services.Auth
@using System.Net.Http
@using BreederBlazor.Services.Util
@using BreederBlazor.Models.Base
@using BreederBlazor.Services.BreedingRecords
@using BreederBlazor.Services.Contacts
@using BreederBlazor.Services.Litters
@using BreederBlazor.Models.Dtos.LitterDto

@inherits BasePageComponent

@inject IAuthService AuthService
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IBreedingRecordService BreedingRecordService
@inject IContactService ContactService
@inject ILitterService LitterService

@if (Loaded)
{
<div class="container" style="margin: 20px 7px 20px 4px;">

    <div class="row">
        <div class="col BreedingRecordFormCol">
            <h3>Litter Name</h3>
            <RadzenTextBox @bind-Value=@createLitterDto.Name Change=@(args => OnChange(args, "TextBox")) />
        </div>
    </div>

    <div class="row">
        <div class="col">
            <h3>Born</h3>
            <RadzenDatePicker @bind-Value=@createLitterDto.DateOfBirth DateFormat="d" Change=@(args => OnChange(args, "DatePicker")) />
        </div>
        <div class="col">
            <h3>Acquired</h3>
            <RadzenDatePicker @bind-Value=@createLitterDto.DateOfAcquisition DateFormat="d" Change=@(args => OnChange(args, "DatePicker")) />
        </div>
    </div>

    <div class="row">
        <div class="col">
            <h3>Breeder</h3>
            <RadzenDropDown AllowClear="true" TValue="int"
                            Data=@(contacts.Distinct())
                            TextProperty="Name" ValueProperty="Id" @bind-Value=@createLitterDto.BreederId Change=@(args => OnChange(args, "DropDown")) />
        </div>
    </div>

    <div class="row">
        <div class="col">
            <h3>Make this record public? <RadzenCheckBox @bind-Value=@createLitterDto.Public TValue="bool" Change=@(args => OnChange(args, "CheckBox1 CheckBox")) /></h3>

        </div>
    </div>

    <div class="row">
        <div class="col">
            <RadzenButton Click=@(args => OnClickSubmit("Button with text")) Text="Submit" Style="margin-bottom: 20px; background-color: forestgreen;" />
        </div>
        <div class="col">
            <RadzenButton Click=@(args => OnClickCancel("Button with text")) Text="Cancel" Style="margin-bottom: 20px; background-color: red;" />
        </div>
    </div>
</div>

    <div class="col-xl-6">
        <EventConsole @ref=@console />
    </div>

}
else
{
    <h3>Loading...</h3>
}

@code
{

    DateTime? Birthday = DateTime.Now;
    IEnumerable<Contact> contacts;
    IEnumerable<Litter> litters;

    List<ContactType> contactTypes;
    int currentContactType = 0;

    CreateLitterDto createLitterDto;

    private bool Loaded = false;

    EventConsole console;

    protected override async Task OnInitializedAsync()
    {

        createLitterDto = new CreateLitterDto();

        // Load contacts
        contacts = await ContactService.GetAllContacts(AuthService.user.Key);

        // Load litters
        litters = await LitterService.GetAllLitters(AuthService.user.Key);

        contactTypes = Enum.GetValues(typeof(ContactType)).Cast<ContactType>().ToList();

        Loaded = true;
    }


    async Task OnClickSubmit(string buttonName)
    {
        await LitterService.CreateLitter(createLitterDto, AuthService.user.Key);
        //NavigationManager.NavigateTo("/breedingRecordList");
        NavigationManager.NavigateTo(PageHistory.PopPage());
    }

    async Task OnClickCancel(string buttonName)
    {
        console.Log($"{buttonName} clicked");
        //NavigationManager.NavigateTo("/breedingRecordList");
        NavigationManager.NavigateTo(PageHistory.PopPage());
    }


    void OnChange(object value, string name)
    {
        console.Log($"{name} value changed to {value}");
    }

    void OnChangeContactType(object value, string name)
    {
        console.Log($"{name} value changed to {value}");
        //createContactDto.Type = (ContactType)value;
    }


}
