@page "/breedingRecord/view/{id:int}"

@using Services
@using BreederBlazor.Services.Auth
@using System.Net.Http
@using BreederBlazor.Services.Util
@using System.Net.Http.Headers
@using BreederBlazor.Models.Base
@using BreederBlazor.Components
@using BreederBlazor.Services.BreedingRecords


@inject IAuthService AuthService
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IBreedingRecordService BreedingRecordService

@if (Loaded && Record != null)
{
    <div class="row">
        <div class="col-2">
            Name
        </div>
        <div class="col">
            @Record.Name
        </div>
    </div>

    <div class="row">
        <div class="col-2">
            Birthday
        </div>
        <div class="col">
            @Record.Birthday.Date.ToShortDateString()
        </div>
    </div>
    <div class="row">
        <div class="col-2">
            Sex
        </div>
        <div class="col">
            @Record.Sex
        </div>
    </div>
    <div class="row">
        <div class="col-2">
            Date of Acquisition
        </div>
        <div class="col">
            @Record.DateOfAcquisition.ToShortDateString()
        </div>
    </div>
    @if (Record.BirthLitter != null)
    {
        <div class="row">
            <div class="col-2">
                Birth Litter
            </div>
            <div class="col">
                @Record.BirthLitter.Name
            </div>
        </div>
    }

    @if (Record.Breeder != null)
    {
        <div class="row">
            <div class="col-2">
                Breeder
            </div>
            <div class="col">
                <ContactComponent contactRecord="@Record.Breeder" />
            </div>
        </div>
    }
    
    @if (Record.Owner != null)
    {
        <div class="row">
            <div class="col-2">
                Owner
            </div>
            <div class="col">
                <ContactComponent contactRecord="@Record.Owner" />
            </div>
        </div>
    }

    <div class="row">
        @foreach (Characteristic characteristic in Record.Characteristics)
        {
            <div class="row">
                <div class="col-2">@characteristic.Category</div>
                <div class="col">@characteristic.Feature</div>
            </div>
        }
    </div>

    @foreach (BreedingRecordNote note in Record.Notes)
    {
        <BreedingRecordNoteComponent Note="note" />
    }

}

@code
{
    [Parameter]
    public int id { get; set; }



    private bool Loaded = false;

    private BreedingRecord Record;

    protected override async Task OnInitializedAsync()
    {
        if (AuthService.user.Key != "" && AuthService.user.Key != null)
        {


            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", AuthService.user.Key);

            var response = await Http.GetAsync("http://localhost:5050/auth/Verify");

            if (!response.IsSuccessStatusCode)
            {
                AuthService.user.Username = "";
                AuthService.user.Key = "";
                NavigationManager.NavigateTo("/");
            }
            else
            {

                await RetrieveDetails();
            }

        }
        else
        {
            NavigationManager.NavigateTo("/");
        }

        Loaded = true;
    }


    private async Task RetrieveDetails()
    {
        Record = await BreedingRecordService.GetBreedingRecordById(AuthService.user.Key, id);

    }

}
