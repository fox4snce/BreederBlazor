@page "/home"

@using Services
@using BreederBlazor.Services.Auth
@using System.Net.Http
@using BreederBlazor.Services.Util
@using System.Net.Http.Headers
@using BreederBlazor.Models.Base
@using Radzen
@using Radzen.Blazor

@using BreederBlazor.Services.BreedingRecords

@inject IAuthService AuthService
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IBreedingRecordService BreedingRecordService

@if (Loaded)
{

<RadzenGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Advanced" AllowPaging="true" PageSize="4"
            AllowSorting="true" Data="@breedingRecords.AsQueryable()" TItem="BreedingRecord" Value="@Record" ColumnWidth="200px">
    <Columns>
            <RadzenGridColumn TItem="BreedingRecord" Property="Name" Title="Name">
                <Template Context="data">
                    <div @onclick="(() => GoToBreedingRecordDetails(data.Id))">@data.Name</div>
                </Template>
                </RadzenGridColumn>

            <RadzenGridColumn TItem="BreedingRecord" Property="BirthDate" Title="Birth Date">
                <Template Context="data">
                    @String.Format("{0:d}", data.Birthday)
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="BreedingRecord" Property="DateOfAcquisition" Title="Acquired">
                <Template Context="data">
                    @String.Format("{0:d}", data.DateOfAcquisition)
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="BreedingRecord" Property="Owner.Name" Title="Owner" />
            <RadzenGridColumn TItem="BreedingRecord" Property="BirthLitter.Name" Title="Birth Litter" />
            <RadzenGridColumn TItem="BreedingRecord" Property="Sex" Title="Sex" />
            <RadzenGridColumn TItem="BreedingRecord" Property="Breeder.Name" Title="Breeder" />
        </Columns>

</RadzenGrid>


    
}


@code {

    private bool Loaded = false;

    private List<BreedingRecord> breedingRecords;

    private BreedingRecord Record;

    protected override async Task OnInitializedAsync()
    {
        if (AuthService.user.Key != "" && AuthService.user.Key != null)
        {



            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", AuthService.user.Key);

            var response = await Http.GetAsync("http://localhost:5050/auth/Verify");

            if (!response.IsSuccessStatusCode)
            {
                AuthService.user.Username = "";
                AuthService.user.Key = "";
                NavigationManager.NavigateTo("/");
            }
            else
            {
                breedingRecords = await BreedingRecordService.GetAllBreedingRecords(AuthService.user.Key);
            }
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }

        Loaded = true;
    }

    private void GoToBreedingRecordDetails(int id)
    {
        NavigationManager.NavigateTo("/breedingRecord/view/" + id.ToString());
    }
}
